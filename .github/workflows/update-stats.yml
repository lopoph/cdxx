name: Update Stats Data
on:
  # 手动触发（推荐主要使用方式）
  workflow_dispatch:
  # 定时同步（可选，每2小时一次）
  schedule:
    - cron: '*/2 * * * *'

permissions:
  contents: write

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create data directory if not exists
        run: mkdir -p data

      - name: Initialize or update data.json
        run: |
          # 如果data.json不存在，创建初始文件
          if [ ! -f "data.json" ]; then
            echo "创建初始data.json文件"
            cat > data.json << EOF
          {
            "visits": 1,
            "likes": 0,
            "updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "status": "active"
          }
          EOF
          fi

          # 读取当前数据
          CURRENT_VISITS=$(jq -r '.visits' data.json)
          CURRENT_LIKES=$(jq -r '.likes' data.json)
          
          echo "当前数据: visits=$CURRENT_VISITS, likes=$CURRENT_LIKES"

          # 简单的数据更新逻辑（这里可以自定义）
          # 示例：每次运行访问量+1，点赞数随机增加0-2
          NEW_VISITS=$((CURRENT_VISITS + 1))
          RANDOM_LIKES=$((RANDOM % 3))  # 0, 1, 或 2
          NEW_LIKES=$((CURRENT_LIKES + RANDOM_LIKES))
          
          # 更新数据文件
          jq --argjson visits "$NEW_VISITS" \
             --argjson likes "$NEW_LIKES" \
             --arg updated "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
             '.visits = $visits | .likes = $likes | .updated = $updated' \
             data.json > temp.json && mv temp.json data.json
          
          echo "更新后数据: visits=$NEW_VISITS, likes=$NEW_LIKES"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data.json
          git diff --quiet && git diff --staged --quiet || git commit -m "📊 更新统计数据: +1访问, +点赞 [skip ci]"
          git push
